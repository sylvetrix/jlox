program			> declaration* EOF ;

declaration		> varDecl
				| statement ;

statement		> exprStmt
				| forStmt
				| ifStmt
				| printStmt
				| whileStmt;
				| block ;

forStmt			> "for" "(" ( varDecl | exprStmt | ";")
							expression? ";"
							expression? ")" statement ;
whileStmt		> "while" "(" expression ")" statement ;
ifStmt			> "if" "(" expression ")" statement ( "else" statement )? ;
block			> "{" declaration* "}" ;
exprStmt		> expression ";" ;
printStmt		> "print" expression ";" ;

varDecl			> "var" IDENTIFIER ( "=" expression )? ";" ;
expression		> assignment ;
assignment		> identifier "=" assignment
				| logic_or ;
logic_or		> logic_and ( "or" logic_and )* ;
logic_and		> equality ( "and" equality )* ;
equality		> comparison ( ( "!=" | "==" ) comparison )* ;
comparison		> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition		> muliplication ( ( "-" | "+" ) multiplication )* ;
muliplication	> unary ( ( "/" | "*" ) unary )* ;
unary			> ( "!" | "-" ) unary
				| primary ;
primary			> "true" | "false" | "nil" | "this"
				| NUMBER | STRING
				| "(" expression ")"
				| IDENTIFIER ;
